gbp_rates = gbp_nodes %>%
xml_attr("rate") %>%
as.numeric()
gbp_rates
data <- data.frame(time = exrate_times, rate = gbp_rates)
ggplot(data, aes(x = time, y = rate))
data <- data.frame(time = exrate_times, rate = gbp_rates)
ggplot(data, aes(x = time, y = rate)) + geom_line()
data <- data.frame(time = exrate_times, rate = gbp_rates)
ggplot(data, aes(x = time, y = rate)) + geom_line() + labs(title= "Exchange Rates Over Time", x = "Date", y = "Exchange Rate (against Euro)")
df <- data.frame(gbp_rates,exrate_time)
str(df)
ggplot(df, aes(x=exrate_time,y=gbp_rates)) +
geom_line() +
labs(title= "Exchange Rates Over Time",
x = "Date",
y = "Exchange Rate (against Euro)")
exrate_time <- xml_find_all(exrate_root, "//Cube[@time]") %>%
xml_attr("time") %>%
ymd()
class(exrate_time)
df <- data.frame(gbp_rates,exrate_time)
str(df)
ggplot(df, aes(x=exrate_time,y=gbp_rates)) +
geom_line() +
labs(title= "Exchange Rates Over Time",
x = "Date",
y = "Exchange Rate (against Euro)")
data <- data.frame(time = exrate_times, rate = gbp_rates)
ggplot(data, aes(x = time, y = rate)) + geom_line() + labs(title= "Exchange Rates Over Time", x = "Date", y = "Exchange Rate (against Euro)")
identical(exrate_root,exrate.xml)
GetExchangeRate <- function(currency){
timeXml = xml_find_all(exrate_root, "//Cube[@time]")
rateXml = xml_find_all(exrate_root, str_c('//Cube[@currency="', currency, '"]'))
rateValue<- c(as.numeric(xml_attr(rateXml, "rate")))
names(v) <- ymd(xml_attr(timeXml, "time"))
return(rateValue)
}
currencies<- lapply(c("GBP", "USD", "CAD", "AUD"), GetExchangeRates)
names(currencies) <- c("GBP", "USD", "CAD", "AUD")
identical(exrate_root,exrate.xml)
GetExchangeRates <- function(currency){
timeXml = xml_find_all(exrate_root, "//Cube[@time]")
rateXml = xml_find_all(exrate_root, str_c('//Cube[@currency="', currency, '"]'))
rateValue<- c(as.numeric(xml_attr(rateXml, "rate")))
names(v) <- ymd(xml_attr(timeXml, "time"))
return(rateValue)
}
currencies<- lapply(c("GBP", "USD", "CAD", "AUD"), GetExchangeRates)
names(currencies) <- c("GBP", "USD", "CAD", "AUD")
identical(exrate_root,exrate.xml)
GetExchangeRates <- function(currency){
timeXml = xml_find_all(exrate_root, "//Cube[@time]")
rateXml = xml_find_all(exrate_root, str_c('//Cube[@currency="', currency, '"]'))
rateValue<- c(as.numeric(xml_attr(rateXml, "rate")))
names(rateValue) <- ymd(xml_attr(timeXml, "time"))
return(rateValue)
}
currencies<- lapply(c("GBP", "USD", "CAD", "AUD"), GetExchangeRates)
names(currencies) <- c("GBP", "USD", "CAD", "AUD")
currencies
exrate.df <- do.call(data.frame, currencies)
View(exrate.df)
exrate.df <- do.call(data.frame, currencies)
exrate.df <- mutate(exrate.df, time = row.names(exrate.df))
exrate.df <- do.call(data.frame, currencies)
exrate.df <- mutate(exrate.df, time = ymd(row.names(exrate.df)))
exrate.df
data <- gather(exrate.df, currency, rate, -time)
data
View(data)
data <- gather(exrate.df, currency, rate, -time)
ggplot(gdf,aes(x=time, y=rate)) + geom_line(aes(color=currency)) + labs(title= "Exchange Rates Over Time", x = "Date", y = "Exchange Rate (against Euro)")
data <- gather(exrate.df, currency, rate, -time)
ggplot(data,aes(x=time, y=rate)) + geom_line(aes(color=currency)) + labs(title= "Exchange Rates Over Time", x = "Date", y = "Exchange Rate (against Euro)")
load("~/Documents/Master/stat133/Lab/evaluator.rda")
library(ggplot2)
d <- function(f, x, y, s) {
stuff<-seq(x,y,by=s)
stuff2<-c()
for(i in 1:length(stuff)){thing<-f(stuff[i]); stuff2[i]<-thing}
m<-max(stuff2)
mm<-stuff[stuff2==m]
mm<-min(mm)
return(list(m,mm))
}
# Example usage
g <- function(x) -(x ^ 2)
d(g, -1, 1, .1)
firstMaximum <- function(f, start, end, interval) {
#initialization
createSequence <- seq(start, end, by = interval)
calculatedSequence <- c()
#calculate sequence
for(i in 1:length(createSequence)) {
functionResult <- f(createSequence[i])
calculatedSequence[i] <- functionResult
}
#get the first Maximum value
maximumY <- max(calculatedSequence)
maximumX <- originalSequence[calculatedSequence == maximum]
firstMaximumX <- min(maximumX)
return(list(maximumY, firstMaximumX))
}
# Example usage
minusSquare <- function(x){
return(-(x ^ 2))
}
firstMaximum(minusSquare, -1, 1, 0.1)
firstMaximum <- function(f, start, end, interval) {
#initialization
originalSequence <- seq(start, end, by = interval)
calculatedSequence <- c()
#calculate sequence
for(i in 1:length(originalSequence)) {
functionResult <- f(originalSequence[i])
calculatedSequence[i] <- functionResult
}
#get the first Maximum value
maximumY <- max(calculatedSequence)
maximumX <- originalSequence[calculatedSequence == maximum]
firstMaximumX <- min(maximumX)
return(list(maximumY, firstMaximumX))
}
# Example usage
minusSquare <- function(x){
return(-(x ^ 2))
}
firstMaximum(minusSquare, -1, 1, 0.1)
firstMaximum <- function(f, start, end, interval) {
#initialization
originalSequence <- seq(start, end, by = interval)
calculatedSequence <- c()
#calculate sequence
for(i in 1:length(originalSequence)) {
functionResult <- f(originalSequence[i])
calculatedSequence[i] <- functionResult
}
#get the first Maximum value
maximumY <- max(calculatedSequence)
maximumX <- originalSequence[calculatedSequence == maximumY]
firstMaximumX <- min(maximumX)
return(list(maximumY, firstMaximumX))
}
# Example usage
minusSquare <- function(x){
return(-(x ^ 2))
}
firstMaximum(minusSquare, -1, 1, 0.1)
x <- c(1,2,3,4,5,6,7)
is.na(x)
help(is.na)
ss <- function(x)
{x<-x[!is.na(x)]
a<-x[1];for(i in 2:length(x)) a[i]<-(a[i-1]+x[i])
a<-a/(1:length(x))
foo<-x
cc<-0
for(i in 1:length(foo)){x<-foo[1:i]
c<-sort(x);
if(length(x)%%2==0){cc[i]<-(c[floor((length(c)+1)/2)] + c[ceiling((length(c)+1)/2)])/2} else{ cc[i]<-c[(length(c)+1)/2]}}
return(list(a,cc))
}
ss(c(5,10,15,20,5,10,15,20))
ss(1:10)
ss(c(1,2,6,2,4,5))
x <- x(1,2,3,4,5,6,7)
x <- c(1,2,3,4,5,6,7)
x<-x[!is.na(x)]
x
is.na(x)
a<-x[1];for(i in 2:length(x)) a[i]<-(a[i-1]+x[i])
a
a<-a/(1:length(x))
a
foo<-x
cc<-0
y <- c(1,3,5,2,4,6)
sort(y)
y[3]+y[4]
ss <- function(x) {
# filter out the element which is NA
filterNA <- x[!is.na(x)]
# calculate the average value of the first k elements, 1 <= k <= filterNA.length
sum <- filterNA[1]
for(i in 2:length(filterNA)) {
sum[i] <- sum[i-1] + filterNA[i]
}
average <- sum / (1:length(filterNA))
# calculate the median of the average values
median <- 0
for(i in 1:length(filterNA)) {
firstAverage <- filterNA[1:i]
orderedAverage <- sort(firstAverage);
if(length(firstAverage) %% 2 == 0) {
median[i] <- (orderedAverage[floor((length(orderedAverage) + 1) / 2)] +  orderedAverage[ceiling((length(orderedAverage) + 1) / 2)]) / 2
}
else {
median[i] <- orderedAverage[(length(orderedAverage) + 1) / 2]
}
}
return(list(average,median))
}
ss(c(5,10,15,20,5,10,15,20))
ss(1:10)
ss(c(1,2,6,2,4,5))
averageAndMedian <- function(x) {
# filter out the element which is NA
filterNA <- x[!is.na(x)]
# calculate the average value of the first k elements, 1 <= k <= filterNA.length
sum <- filterNA[1]
for(i in 2:length(filterNA)) {
sum[i] <- sum[i-1] + filterNA[i]
}
average <- sum / (1:length(filterNA))
# calculate the median of the average values
median <- 0
for(i in 1:length(filterNA)) {
firstAverage <- filterNA[1:i]
orderedAverage <- sort(firstAverage);
if(length(firstAverage) %% 2 == 0) {
median[i] <- (orderedAverage[floor((length(orderedAverage) + 1) / 2)] +  orderedAverage[ceiling((length(orderedAverage) + 1) / 2)]) / 2
}
else {
median[i] <- orderedAverage[(length(orderedAverage) + 1) / 2]
}
}
return(list(average,median))
}
averageAndMedian(c(5,10,15,20,5,10,15,20))
averageAndMedian(1:10)
averageAndMedian(c(1,2,6,2,4,5))
library(dplyr)
iris
data <- iris
View(data)
d<-iris
dd<-unique(d[,5])
d1<-d[which(d[,5]==dd[1]),]
d2<-d[which(d[,5]==dd[2]),]
d3<-d[which(d[,5]==dd[3]),]
d1[,1] <- mean(d1[,1])
d1[,2] <- mean(d1[,2])
d1[,3] <- mean(d1[,3])
d1[,4] <- mean(d1[,4])
d2[,1] <- mean(d2[,1])
d2[,2] <- mean(d2[,2])
d2[,3] <- mean(d2[,3])
d2[,4] <- mean(d2[,4])
d3[,1] <- mean(d3[,1])
d3[,2] <- mean(d3[,2])
d3[,3] <- mean(d3[,3])
d3[,4] <- mean(d3[,4])
ddd<-rbind(d1[1,],d2[1,],d3[1,])
rownames(ddd) <- NULL
View(ddd)
originalData <- iris
uniqueSpecies <- unique(originalData[ ,5])
species1 <- d[which(d[ ,5] == dd[1]), ]
species2 <- d[which(d[ ,5] == dd[2]), ]
species3 <- d[which(d[ ,5] == dd[3]), ]
AverageS1 <- lapply(species1, mean)
AverageS2 <- lapply(species2, mean)
AverageS3 <- lapply(species3, mean)
averageDataGroupBySpecies <- rbind(AverageS1[1,], AverageS2[1,], AverageS3[1,])
rownames(averageDataGroupBySpecies) <- NULL
originalData <- iris
uniqueSpecies <- unique(originalData[ ,5])
species1 <- originalData[which(originalData[ ,5] == uniqueSpecies[1]), ]
species2 <- originalData[which(originalData[ ,5] == uniqueSpecies[2]), ]
species3 <- originalData[which(originalData[ ,5] == uniqueSpecies[3]), ]
AverageS1 <- lapply(species1, mean)
AverageS2 <- lapply(species2, mean)
AverageS3 <- lapply(species3, mean)
averageDataGroupBySpecies <- rbind(AverageS1[1,], AverageS2[1,], AverageS3[1,])
rownames(averageDataGroupBySpecies) <- NULL
View(d1)
View(d1)
View(d2)
View(d2)
originalData <- iris
uniqueSpecies <- unique(originalData[ ,5])
species1 <- originalData[which(originalData[ ,5] == uniqueSpecies[1]), ]
species2 <- originalData[which(originalData[ ,5] == uniqueSpecies[2]), ]
species3 <- originalData[which(originalData[ ,5] == uniqueSpecies[3]), ]
AverageS1 <- lapply(species1, mean, na.rm = TRUE)
AverageS2 <- lapply(species2, mean, na.rm = TRUE)
AverageS3 <- lapply(species3, mean, na.rm = TRUE)
averageDataGroupBySpecies <- rbind(AverageS1[1, ], AverageS2[1,], AverageS3[1,])
rownames(averageDataGroupBySpecies) <- NULL
AverageS1 <- lapply(species1, mean, na.rm = TRUE)
AverageS1
AverageS1[1, ]
AverageS1[1,]
originalData <- iris
uniqueSpecies <- unique(originalData[ ,5])
species1 <- originalData[which(originalData[ ,5] == uniqueSpecies[1]), ]
species2 <- originalData[which(originalData[ ,5] == uniqueSpecies[2]), ]
species3 <- originalData[which(originalData[ ,5] == uniqueSpecies[3]), ]
AverageS1 <- vapply(species1, mean, na.rm = TRUE)
AverageS2 <- vapply(species2, mean, na.rm = TRUE)
AverageS3 <- vapply(species3, mean, na.rm = TRUE)
averageDataGroupBySpecies <- rbind(AverageS1[1, ], AverageS2[1,], AverageS3[1,])
rownames(averageDataGroupBySpecies) <- NULL
AverageS1 <- vapply(species1, mean, na.rm = TRUE)
AverageS1
originalData <- iris
uniqueSpecies <- unique(originalData[ ,5])
species1 <- originalData[which(originalData[ ,5] == uniqueSpecies[1]), ]
species2 <- originalData[which(originalData[ ,5] == uniqueSpecies[2]), ]
species3 <- originalData[which(originalData[ ,5] == uniqueSpecies[3]), ]
AverageS1 <- sapply(species1, mean, na.rm = TRUE)
AverageS2 <- sapply(species2, mean, na.rm = TRUE)
AverageS3 <- sapply(species3, mean, na.rm = TRUE)
AverageS1
AverageS1 <- sapply(species1, mean, na.rm = TRUE)
AverageS1[5] = uniqueSpecies[1]
AverageS2 <- sapply(species2, mean, na.rm = TRUE)
AverageS2[5] = uniqueSpecies[2]
AverageS3 <- sapply(species3, mean, na.rm = TRUE)
AverageS3[5] = uniqueSpecies[3]
AverageS1
AverageS2
originalData <- iris
uniqueSpecies <- unique(originalData[ ,5])
uniqueSpecies()
uniqueSpecies
AverageS1 <- tapply(originalData$Sepal.Length, originalData$Species, mean, na.rm = TRUE)
AverageS1
AverageS1 <- with(originalData, tapply(Sepal.Length, Species, mean, na.rm = TRUE))
averageAndMedian()
AverageS1
AverageSL <- with(originalData, tapply(Sepal.Length, Species, mean, na.rm = TRUE))
AverageSW <- with(originalData, tapply(Sepal.Width, Species, mean, na.rm = TRUE))
AveragePL <- with(originalData, tapply(Petal.Length, Species, mean, na.rm = TRUE))
AveragePW <- with(originalData, tapply(Pepal.Width, Species, mean, na.rm = TRUE))
AverageSL <- with(originalData, tapply(Sepal.Length, Species, mean, na.rm = TRUE))
AverageSW <- with(originalData, tapply(Sepal.Width, Species, mean, na.rm = TRUE))
AveragePL <- with(originalData, tapply(Petal.Length, Species, mean, na.rm = TRUE))
AveragePW <- with(originalData, tapply(Petal.Width, Species, mean, na.rm = TRUE))
AveragePW
AverageSL <- data.frame(with(originalData, tapply(Sepal.Length, Species, mean, na.rm = TRUE)))
AverageSL
averageDataGroupBySpecies <- cbind(AverageSL, AverageSW)
averageDataGroupBySpecies
AverageSL <- with(originalData, tapply(Sepal.Length, Species, mean, na.rm = TRUE))
averageDataGroupBySpecies <- cbind(AverageSL, AverageSW)
averageAndMedian()
averageDataGroupBySpecies
Sepal.Length <- with(originalData, tapply(Sepal.Length, Species, mean, na.rm = TRUE))
Sepal.Width <- with(originalData, tapply(Sepal.Width, Species, mean, na.rm = TRUE))
Petal.Length <- with(originalData, tapply(Petal.Length, Species, mean, na.rm = TRUE))
Petal.Width<- with(originalData, tapply(Petal.Width, Species, mean, na.rm = TRUE))
averageDataGroupBySpecies <- cbind(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width) %>%
mutate(Species = rownames())
Sepal.Length <- with(originalData, tapply(Sepal.Length, Species, mean, na.rm = TRUE))
Sepal.Width <- with(originalData, tapply(Sepal.Width, Species, mean, na.rm = TRUE))
Petal.Length <- with(originalData, tapply(Petal.Length, Species, mean, na.rm = TRUE))
Petal.Width<- with(originalData, tapply(Petal.Width, Species, mean, na.rm = TRUE))
averageDataGroupBySpecies <- cbind(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
averageDataGroupBySpecies
averageDataGroupBySpecies <- as.data.frame(cbind(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width))
averageDataGroupBySpecies
mutate(averageDataGroupBySpecies$Species = rownames(averageDataGroupBySpecies))
rownames(averageDataGroupBySpecies)
averageDataGroupBySpecies <- as.data.frame(cbind(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width))
averageDataGroupBySpecies <- averageDataGroupBySpecies %>%
mutate(Species = rownames(averageDataGroupBySpecies))
averageDataGroupBySpecies
rownames(averageDataGroupBySpecies) <- NULL
averageDataGroupBySpecies
originalData <- iris
Sepal.Length <- with(originalData, tapply(Sepal.Length, Species, mean, na.rm = TRUE))
Sepal.Width <- with(originalData, tapply(Sepal.Width, Species, mean, na.rm = TRUE))
Petal.Length <- with(originalData, tapply(Petal.Length, Species, mean, na.rm = TRUE))
Petal.Width<- with(originalData, tapply(Petal.Width, Species, mean, na.rm = TRUE))
averageDataGroupBySpecies <- as.data.frame(cbind(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width))
averageDataGroupBySpecies <- averageDataGroupBySpecies %>%
mutate(Species = rownames(averageDataGroupBySpecies))
rownames(averageDataGroupBySpecies) <- NULL
averageDataGroupBySpecies
View(ddd)
View(ddd)
averageAndMedian <- function(x) {
# filter out the element which is NA
filterNA <- x[!is.na(x)]
# calculate the average value of the first k elements, 1 <= k <= filterNA.length
sum <- filterNA[1]
for(i in 2:length(filterNA)) {
sum[i] <- sum[i-1] + filterNA[i]
}
average <- sum / (1:length(filterNA))
# calculate the median of the average values
median <- 0
for(i in 1:length(filterNA)) {
firstAverage <- filterNA[1:i]
orderedAverage <- sort(firstAverage);
if(length(firstAverage) %% 2 == 0) {
median[i] <- (orderedAverage[floor((length(orderedAverage) + 1) / 2)] +  orderedAverage[ceiling((length(orderedAverage) + 1) / 2)]) / 2
}
else {
median[i] <- orderedAverage[(length(orderedAverage) + 1) / 2]
}
}
return(list(average,median))
}
averageAndMedian(c(5,10,15,20,5,10,15,20))
averageAndMedian(1:10)
averageAndMedian(c(1,2,6,2,4,5))
firstMaximum <- function(f, start, end, interval) {
#initialization
originalSequence <- seq(start, end, by = interval)
calculatedSequence <- c()
#calculate sequence
for(i in 1:length(originalSequence)) {
functionResult <- f(originalSequence[i])
calculatedSequence[i] <- functionResult
}
#get the first Maximum value
maximumY <- max(calculatedSequence)
maximumX <- originalSequence[calculatedSequence == maximumY]
firstMaximumX <- min(maximumX)
return(list(maximumY, firstMaximumX))
}
# Example usage
minusSquare <- function(x){
return(-(x ^ 2))
}
firstMaximum(minusSquare, -1, 1, 0.1)
originalData <- iris
Sepal.Length <- with(originalData, tapply(Sepal.Length, Species, mean, na.rm = TRUE))
Sepal.Width <- with(originalData, tapply(Sepal.Width, Species, mean, na.rm = TRUE))
Petal.Length <- with(originalData, tapply(Petal.Length, Species, mean, na.rm = TRUE))
Petal.Width<- with(originalData, tapply(Petal.Width, Species, mean, na.rm = TRUE))
averageDataGroupBySpecies <- as.data.frame(cbind(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width))
averageDataGroupBySpecies <- averageDataGroupBySpecies %>%
mutate(Species = rownames(averageDataGroupBySpecies))
rownames(averageDataGroupBySpecies) <- NULL
??tapply
originalData <- iris
Sepal.Length <- with(originalData, tapply(Sepal.Length, Species, mean, na.rm = TRUE))
Sepal.Width <- with(originalData, tapply(Sepal.Width, Species, mean, na.rm = TRUE))
Petal.Length <- with(originalData, tapply(Petal.Length, Species, mean, na.rm = TRUE))
Petal.Width<- with(originalData, tapply(Petal.Width, Species, mean, na.rm = TRUE))
averageDataGroupBySpecies <- as.data.frame(cbind(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width))
averageDataGroupBySpecies <- averageDataGroupBySpecies %>%
mutate(Species = rownames(averageDataGroupBySpecies))
rownames(averageDataGroupBySpecies) <- NULL
install.packages("shiny")
library(shiny)
library(shiny)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Hello Shiny!"),
# Sidebar with a slider input for the number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
shinyUI(fluidPage(
# Application title
titlePanel("Hello Shiny!"),
# Sidebar with a slider input for the number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
library(shiny)
library(dplyr)
library(ggplot2)
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
# Expression that generates a histogram. The expression is
# wrapped in a call to renderPlot to indicate that:
#
#  1) It is "reactive" and therefore should re-execute automatically
#     when inputs change
#  2) Its output type is a plot
output$distPlot <- renderPlot({
df    <- faithful  # Old Faithful Geyser data
bins  <- input$bins
# draw the histogram with the specified number of bins
ggplot(df, aes(x = waiting)) +
geom_histogram(bins = bins, fill = "darkgray")
})
})
help("fileInput")
selectInput()
help("selectInput")
help("sliderInput")
runApp('Documents/Master/stat133/Lab/my_first_app')
